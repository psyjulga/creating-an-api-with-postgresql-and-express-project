import { Order, OrderStore, OrdersProducts } from '../models/order'
import { User, UserStore } from '../models/user'
import { Product, ProductStore } from '../models/product'
import clearDatabase from '../util/clearDatabase'

const userStore = new UserStore()
const productStore = new ProductStore()
const orderStore = new OrderStore()

const testOrderToAdd: Order = {
	status: 'active',
	user_id: '1',
}

// order_id is automatically generated
const testOrderWithId: Order = {
	order_id: 1,
	status: 'active',
	user_id: '1',
}

describe('Order Model', () => {
	afterAll(async () => {
		await clearDatabase(
			'DELETE FROM orders_products WHERE quantity IS NOT NULL'
		)
		await clearDatabase('DELETE FROM orders WHERE order_id IS NOT NULL')
		await clearDatabase('DELETE FROM users WHERE user_id IS NOT NULL')
		await clearDatabase('DELETE FROM products WHERE product_id IS NOT NULL')
	})

	test('should have an index method', () => {
		expect(orderStore.index).toBeDefined()
	})

	test('should have a show method', () => {
		expect(orderStore.show).toBeDefined()
	})

	test('should have a showOrderByUser method', () => {
		expect(orderStore.showOrderByUser).toBeDefined()
	})

	test('should have a create method', () => {
		expect(orderStore.create).toBeDefined()
	})

	test('should have a addProductToOrder method', () => {
		expect(orderStore.addProductToOrder).toBeDefined()
	})

	test('create method should add an order to the database', async () => {
		// when adding a new order we need to give it a user_id,
		// so we first create a user whose id will be autogenerated to 1
		const testUserToAdd: User = {
			first_name: 'Order Test User',
			last_name: 'Doe',
			password_digest: 'my_secret_password',
		}

		const user = await userStore.create(testUserToAdd)
		console.log('user from create order: ', user)

		const res = await orderStore.create(testOrderToAdd)
		expect(res).toEqual(testOrderWithId)
	})

	test('index method should return a list of all orders', async () => {
		const res = await orderStore.index()
		expect(res).toEqual([testOrderWithId])
	})

	test('show method should return the correct order', async () => {
		const res = await orderStore.show('1')
		expect(res).toEqual(testOrderWithId)
	})

	test('showOrderByUser method should return the correct order', async () => {
		const res = await orderStore.showOrderByUser('1')
		expect(res).toEqual(testOrderWithId)
	})

	test('addProductToOrder method should return the order from the join table', async () => {
		// to add a product to an existing order we need to create a product first
		// because we need to pass its id which will be autogenerated to 1
		const testProductToAdd: Product = {
			name: 'order-model-test-product',
			price: 500,
		}

		const product = await productStore.create(testProductToAdd)

		const ordersProductsToAdd = {
			quantity: 5,
			order_id: '1',
			product_id: '1',
		}
		// id will be autogenerated
		const ordersProductsWithId: OrdersProducts = {
			id: 1,
			quantity: 5,
			order_id: '1',
			product_id: '1',
		}

		const res = await orderStore.addProductToOrder(ordersProductsToAdd)
		expect(res).toEqual(ordersProductsWithId)

		// clear the database afterwards
		await clearDatabase('DELETE FROM products WHERE product_id IS NOT NULL')
	})
})
